/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.io.UnsupportedEncodingException;
import javax.swing.JOptionPane;
import java.security.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Base64;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

/**
 *
 * @author vivek
 */
public class generator extends javax.swing.JFrame {

    /**
     * Creates new form generator
     */
    public generator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Generate = new javax.swing.JButton();
        Privateno = new javax.swing.JTextField();
        Publicno = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Host = new javax.swing.JLabel();
        plainText = new javax.swing.JTextField();
        label = new javax.swing.JLabel();
        Encrypted = new javax.swing.JTextField();
        Send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Generate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Generate.setText("Generate");
        Generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateActionPerformed(evt);
            }
        });

        Privateno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrivatenoActionPerformed(evt);
            }
        });

        Publicno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublicnoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setText("Private key");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setText("Public Key");

        Host.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        Host.setText("Enter Hostname");

        plainText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plainTextActionPerformed(evt);
            }
        });

        label.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        label.setText("Encrypted");

        Send.setText("Send Encrypted");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Generate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Host)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(plainText)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Send)
                                .addGap(0, 143, Short.MAX_VALUE))
                            .addComponent(Privateno)
                            .addComponent(Publicno)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Encrypted)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Host, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plainText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Generate)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Privateno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(Publicno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Encrypted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Send)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PublicnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublicnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PublicnoActionPerformed

    private void GenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateActionPerformed

        String p = "", q = "", text = "";
        try {
            text = this.plainText.getText();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter Prime no", "error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
          // Initialize KeyPairGenerator.
            keyGen.initialize(1024);
            // Generate Key Pairs, a private key and a public key.
            KeyPair keyPair = keyGen.generateKeyPair();
            Key privateKey = keyPair.getPrivate();
            Key publicKey = keyPair.getPublic();
            Base64.Encoder encoder = Base64.getEncoder();
//---Encryption--------------//
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            byte[] Plain = text.getBytes("UTF-8");
            byte[] cipherText = cipher.doFinal(Plain);
  // --------Setting INTO jPANEL eNCRYPTED VALUE----------------------------//          
            this.Encrypted.setText(cipherText.toString());
          
    /// ---------- Generate    signature------------------ //  
    
    Signature sig = Signature.getInstance("SHA256WithRSA");
            sig.initSign((PrivateKey) privateKey);
            sig.update(Plain);
            byte[] signatureBytes = sig.sign();
            System.out.println("Singature:" + encoder.encode(signatureBytes));
    
    ////--------------- SIgnature Verification------------------------------///
    
     sig.initVerify((PublicKey) publicKey);
            sig.update(Plain);
          if(sig.verify(signatureBytes))
          {
          
          //  ------ --------------------------------- Decryption------------------//
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] decryptText = cipher.doFinal(cipherText);
            String str1 = new String(decryptText);
            System.out.println(str1);
          
          }
           
//---------------------------PRivate and Public Key---------------------------------------------//            
            p = encoder.encodeToString(privateKey.getEncoded());

            q = encoder.encodeToString(publicKey.getEncoded());
        
        
        
        }
        catch (NoSuchAlgorithmException e) {
        } 
        catch (NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | UnsupportedEncodingException ex) {
            Logger.getLogger(generator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SignatureException ex) {
            Logger.getLogger(generator.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        String Priv = p;
        String Pub = q;
        this.Privateno.setText(Priv);
        this.Publicno.setText(Pub);


    }//GEN-LAST:event_GenerateActionPerformed

    private void PrivatenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrivatenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PrivatenoActionPerformed

    private void plainTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plainTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plainTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new generator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Encrypted;
    private javax.swing.JButton Generate;
    private javax.swing.JLabel Host;
    private javax.swing.JTextField Privateno;
    private javax.swing.JTextField Publicno;
    private javax.swing.JButton Send;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel label;
    private javax.swing.JTextField plainText;
    // End of variables declaration//GEN-END:variables
}
